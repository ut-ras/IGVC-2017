/* Auto-generated by genmsg_cpp for file /home/ras/igvc_ros/igvc/ros_stacks/igvc_hardware/gps_trimble_driver/srv/Point.srv */
#ifndef GPS_TRIMBLE_DRIVER_SERVICE_POINT_H
#define GPS_TRIMBLE_DRIVER_SERVICE_POINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Point.h"



namespace gps_trimble_driver
{
template <class ContainerAllocator>
struct PointRequest_ {
  typedef PointRequest_<ContainerAllocator> Type;

  PointRequest_()
  : point()
  {
  }

  PointRequest_(const ContainerAllocator& _alloc)
  : point(_alloc)
  {
  }

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
   ::geometry_msgs::Point_<ContainerAllocator>  point;


  typedef boost::shared_ptr< ::gps_trimble_driver::PointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_trimble_driver::PointRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PointRequest
typedef  ::gps_trimble_driver::PointRequest_<std::allocator<void> > PointRequest;

typedef boost::shared_ptr< ::gps_trimble_driver::PointRequest> PointRequestPtr;
typedef boost::shared_ptr< ::gps_trimble_driver::PointRequest const> PointRequestConstPtr;



template <class ContainerAllocator>
struct PointResponse_ {
  typedef PointResponse_<ContainerAllocator> Type;

  PointResponse_()
  {
  }

  PointResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::gps_trimble_driver::PointResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_trimble_driver::PointResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PointResponse
typedef  ::gps_trimble_driver::PointResponse_<std::allocator<void> > PointResponse;

typedef boost::shared_ptr< ::gps_trimble_driver::PointResponse> PointResponsePtr;
typedef boost::shared_ptr< ::gps_trimble_driver::PointResponse const> PointResponseConstPtr;


struct Point
{

typedef PointRequest Request;
typedef PointResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Point
} // namespace gps_trimble_driver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gps_trimble_driver::PointRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gps_trimble_driver::PointRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gps_trimble_driver::PointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a7c84ff13976aa04656e56e300124444";
  }

  static const char* value(const  ::gps_trimble_driver::PointRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa7c84ff13976aa04ULL;
  static const uint64_t static_value2 = 0x656e56e300124444ULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_trimble_driver::PointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_trimble_driver/PointRequest";
  }

  static const char* value(const  ::gps_trimble_driver::PointRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_trimble_driver::PointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point point\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::gps_trimble_driver::PointRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::gps_trimble_driver::PointRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gps_trimble_driver::PointResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gps_trimble_driver::PointResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gps_trimble_driver::PointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::gps_trimble_driver::PointResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_trimble_driver::PointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_trimble_driver/PointResponse";
  }

  static const char* value(const  ::gps_trimble_driver::PointResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_trimble_driver::PointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::gps_trimble_driver::PointResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::gps_trimble_driver::PointResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_trimble_driver::PointRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.point);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PointRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_trimble_driver::PointResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PointResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<gps_trimble_driver::Point> {
  static const char* value() 
  {
    return "a7c84ff13976aa04656e56e300124444";
  }

  static const char* value(const gps_trimble_driver::Point&) { return value(); } 
};

template<>
struct DataType<gps_trimble_driver::Point> {
  static const char* value() 
  {
    return "gps_trimble_driver/Point";
  }

  static const char* value(const gps_trimble_driver::Point&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<gps_trimble_driver::PointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a7c84ff13976aa04656e56e300124444";
  }

  static const char* value(const gps_trimble_driver::PointRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<gps_trimble_driver::PointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_trimble_driver/Point";
  }

  static const char* value(const gps_trimble_driver::PointRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<gps_trimble_driver::PointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a7c84ff13976aa04656e56e300124444";
  }

  static const char* value(const gps_trimble_driver::PointResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<gps_trimble_driver::PointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_trimble_driver/Point";
  }

  static const char* value(const gps_trimble_driver::PointResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // GPS_TRIMBLE_DRIVER_SERVICE_POINT_H

