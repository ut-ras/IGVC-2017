/* Auto-generated by genmsg_cpp for file /home/ras/igvc_ros/igvc/ros_stacks/igvc_hardware/gps_trimble_driver/srv/Waypoints.srv */
#ifndef GPS_TRIMBLE_DRIVER_SERVICE_WAYPOINTS_H
#define GPS_TRIMBLE_DRIVER_SERVICE_WAYPOINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/Point.h"

namespace gps_trimble_driver
{
template <class ContainerAllocator>
struct WaypointsRequest_ {
  typedef WaypointsRequest_<ContainerAllocator> Type;

  WaypointsRequest_()
  {
  }

  WaypointsRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::gps_trimble_driver::WaypointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_trimble_driver::WaypointsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WaypointsRequest
typedef  ::gps_trimble_driver::WaypointsRequest_<std::allocator<void> > WaypointsRequest;

typedef boost::shared_ptr< ::gps_trimble_driver::WaypointsRequest> WaypointsRequestPtr;
typedef boost::shared_ptr< ::gps_trimble_driver::WaypointsRequest const> WaypointsRequestConstPtr;



template <class ContainerAllocator>
struct WaypointsResponse_ {
  typedef WaypointsResponse_<ContainerAllocator> Type;

  WaypointsResponse_()
  : waypoints()
  {
  }

  WaypointsResponse_(const ContainerAllocator& _alloc)
  : waypoints(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _waypoints_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  waypoints;


  typedef boost::shared_ptr< ::gps_trimble_driver::WaypointsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_trimble_driver::WaypointsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WaypointsResponse
typedef  ::gps_trimble_driver::WaypointsResponse_<std::allocator<void> > WaypointsResponse;

typedef boost::shared_ptr< ::gps_trimble_driver::WaypointsResponse> WaypointsResponsePtr;
typedef boost::shared_ptr< ::gps_trimble_driver::WaypointsResponse const> WaypointsResponseConstPtr;


struct Waypoints
{

typedef WaypointsRequest Request;
typedef WaypointsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Waypoints
} // namespace gps_trimble_driver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gps_trimble_driver::WaypointsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gps_trimble_driver::WaypointsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gps_trimble_driver::WaypointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::gps_trimble_driver::WaypointsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_trimble_driver::WaypointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_trimble_driver/WaypointsRequest";
  }

  static const char* value(const  ::gps_trimble_driver::WaypointsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_trimble_driver::WaypointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::gps_trimble_driver::WaypointsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::gps_trimble_driver::WaypointsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gps_trimble_driver::WaypointsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gps_trimble_driver::WaypointsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gps_trimble_driver::WaypointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0511c019d3d3f0edeb56aaf3709c8aea";
  }

  static const char* value(const  ::gps_trimble_driver::WaypointsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0511c019d3d3f0edULL;
  static const uint64_t static_value2 = 0xeb56aaf3709c8aeaULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_trimble_driver::WaypointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_trimble_driver/WaypointsResponse";
  }

  static const char* value(const  ::gps_trimble_driver::WaypointsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gps_trimble_driver::WaypointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point[] waypoints\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::gps_trimble_driver::WaypointsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_trimble_driver::WaypointsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WaypointsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gps_trimble_driver::WaypointsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.waypoints);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WaypointsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<gps_trimble_driver::Waypoints> {
  static const char* value() 
  {
    return "0511c019d3d3f0edeb56aaf3709c8aea";
  }

  static const char* value(const gps_trimble_driver::Waypoints&) { return value(); } 
};

template<>
struct DataType<gps_trimble_driver::Waypoints> {
  static const char* value() 
  {
    return "gps_trimble_driver/Waypoints";
  }

  static const char* value(const gps_trimble_driver::Waypoints&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<gps_trimble_driver::WaypointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0511c019d3d3f0edeb56aaf3709c8aea";
  }

  static const char* value(const gps_trimble_driver::WaypointsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<gps_trimble_driver::WaypointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_trimble_driver/Waypoints";
  }

  static const char* value(const gps_trimble_driver::WaypointsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<gps_trimble_driver::WaypointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0511c019d3d3f0edeb56aaf3709c8aea";
  }

  static const char* value(const gps_trimble_driver::WaypointsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<gps_trimble_driver::WaypointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gps_trimble_driver/Waypoints";
  }

  static const char* value(const gps_trimble_driver::WaypointsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // GPS_TRIMBLE_DRIVER_SERVICE_WAYPOINTS_H

