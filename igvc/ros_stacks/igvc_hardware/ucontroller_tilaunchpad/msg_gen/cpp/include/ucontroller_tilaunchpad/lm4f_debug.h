/* Auto-generated by genmsg_cpp for file /home/ras/igvc_ros/igvc/ros_stacks/igvc_hardware/ucontroller_tilaunchpad/msg/lm4f_debug.msg */
#ifndef UCONTROLLER_TILAUNCHPAD_MESSAGE_LM4F_DEBUG_H
#define UCONTROLLER_TILAUNCHPAD_MESSAGE_LM4F_DEBUG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace ucontroller_tilaunchpad
{
template <class ContainerAllocator>
struct lm4f_debug_ {
  typedef lm4f_debug_<ContainerAllocator> Type;

  lm4f_debug_()
  : header()
  , received_right(0)
  , received_left(0)
  , motors_right(0.0)
  , motors_left(0.0)
  , deltas_right(0)
  , deltas_left(0)
  {
  }

  lm4f_debug_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , received_right(0)
  , received_left(0)
  , motors_right(0.0)
  , motors_left(0.0)
  , deltas_right(0)
  , deltas_left(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _received_right_type;
  int32_t received_right;

  typedef int32_t _received_left_type;
  int32_t received_left;

  typedef double _motors_right_type;
  double motors_right;

  typedef double _motors_left_type;
  double motors_left;

  typedef int32_t _deltas_right_type;
  int32_t deltas_right;

  typedef int32_t _deltas_left_type;
  int32_t deltas_left;


  typedef boost::shared_ptr< ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct lm4f_debug
typedef  ::ucontroller_tilaunchpad::lm4f_debug_<std::allocator<void> > lm4f_debug;

typedef boost::shared_ptr< ::ucontroller_tilaunchpad::lm4f_debug> lm4f_debugPtr;
typedef boost::shared_ptr< ::ucontroller_tilaunchpad::lm4f_debug const> lm4f_debugConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ucontroller_tilaunchpad

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2d4dd32636723f27f864e936b43a79f9";
  }

  static const char* value(const  ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2d4dd32636723f27ULL;
  static const uint64_t static_value2 = 0xf864e936b43a79f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ucontroller_tilaunchpad/lm4f_debug";
  }

  static const char* value(const  ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header \n\
int32 received_right\n\
int32 received_left\n\
float64 motors_right\n\
float64 motors_left\n\
int32 deltas_right\n\
int32 deltas_left\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.received_right);
    stream.next(m.received_left);
    stream.next(m.motors_right);
    stream.next(m.motors_left);
    stream.next(m.deltas_right);
    stream.next(m.deltas_left);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct lm4f_debug_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ucontroller_tilaunchpad::lm4f_debug_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "received_right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.received_right);
    s << indent << "received_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.received_left);
    s << indent << "motors_right: ";
    Printer<double>::stream(s, indent + "  ", v.motors_right);
    s << indent << "motors_left: ";
    Printer<double>::stream(s, indent + "  ", v.motors_left);
    s << indent << "deltas_right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deltas_right);
    s << indent << "deltas_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deltas_left);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UCONTROLLER_TILAUNCHPAD_MESSAGE_LM4F_DEBUG_H

